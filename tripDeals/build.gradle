// TripDeals build.gradle

plugins {
	id 'org.springframework.boot' version '2.3.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'jacoco'
	id 'checkstyle'
}
apply plugin: 'io.spring.dependency-management'

group = 'com.tripmaster'
version = '2.1'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	
    implementation fileTree(dir: 'src/main/resources/libs', include: 'TripPricer.jar')
    
    implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: '8.37'
	
}


// BOOT JAR ********************************************************************
bootJar {
    manifest {
        attributes 'Start-Class': 'com.tripmaster.tripdeals.TripDealsApplication'
    }
}

// TESTS ***********************************************************************
test {
    useJUnitPlatform()
    
    String testType = System.properties['test.type']
    if (testType == 'integration') {
        include '**/*IntegrationTest.*'
        include '**/*IntegrationSpec.*'
    } else if (testType == 'unit') {
        include '**/*Test.*'
        include '**/*Spec.*'
        exclude '**/*IntegrationTest.*'
        exclude '**/*IntegrationSpec.*'
    } else if (testType == 'all') {
        include '**/*Test.*'
        include '**/*Spec.*'
    } else {
        //Default to unit
        include '**/*Test.*'
        include '**/*Spec.*'
        exclude '**/*IntegrationTest.*'
        exclude '**/*IntegrationSpec.*'
    }
    
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}


// JACOCO **********************************************************************
jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/libs/**']
            )
        }))
    }
}
test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

// CHECKSTYLE *************************************************
checkstyle {
    configFile = file('build/reports/checkstyle-checker.xml');
    reportsDir = file("$project.buildDir/reports/checkstyle/")
}

checkstyleTest.enabled = false

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
